// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMMON_TFLITE_GPU_GL_DATA_H_
#define FLATBUFFERS_GENERATED_COMMON_TFLITE_GPU_GL_DATA_H_

#include "flatbuffers/flatbuffers.h"

namespace tflite {
namespace gpu {
namespace gl {
namespace data {

struct Uint3;
struct Uint3Builder;

struct Uint2;
struct Uint2Builder;

struct Uint1;
struct Uint1Builder;

struct Uint3 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Uint3Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  uint32_t x() const {
    return GetField<uint32_t>(VT_X, 0);
  }
  uint32_t y() const {
    return GetField<uint32_t>(VT_Y, 0);
  }
  uint32_t z() const {
    return GetField<uint32_t>(VT_Z, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_X) &&
           VerifyField<uint32_t>(verifier, VT_Y) &&
           VerifyField<uint32_t>(verifier, VT_Z) &&
           verifier.EndTable();
  }
};

struct Uint3Builder {
  typedef Uint3 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(uint32_t x) {
    fbb_.AddElement<uint32_t>(Uint3::VT_X, x, 0);
  }
  void add_y(uint32_t y) {
    fbb_.AddElement<uint32_t>(Uint3::VT_Y, y, 0);
  }
  void add_z(uint32_t z) {
    fbb_.AddElement<uint32_t>(Uint3::VT_Z, z, 0);
  }
  explicit Uint3Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Uint3Builder &operator=(const Uint3Builder &);
  flatbuffers::Offset<Uint3> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint3>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint3> CreateUint3(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t x = 0,
    uint32_t y = 0,
    uint32_t z = 0) {
  Uint3Builder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Uint2 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Uint2Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6
  };
  uint32_t x() const {
    return GetField<uint32_t>(VT_X, 0);
  }
  uint32_t y() const {
    return GetField<uint32_t>(VT_Y, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_X) &&
           VerifyField<uint32_t>(verifier, VT_Y) &&
           verifier.EndTable();
  }
};

struct Uint2Builder {
  typedef Uint2 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(uint32_t x) {
    fbb_.AddElement<uint32_t>(Uint2::VT_X, x, 0);
  }
  void add_y(uint32_t y) {
    fbb_.AddElement<uint32_t>(Uint2::VT_Y, y, 0);
  }
  explicit Uint2Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Uint2Builder &operator=(const Uint2Builder &);
  flatbuffers::Offset<Uint2> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint2>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint2> CreateUint2(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t x = 0,
    uint32_t y = 0) {
  Uint2Builder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct Uint1 FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Uint1Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4
  };
  uint32_t x() const {
    return GetField<uint32_t>(VT_X, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_X) &&
           verifier.EndTable();
  }
};

struct Uint1Builder {
  typedef Uint1 Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(uint32_t x) {
    fbb_.AddElement<uint32_t>(Uint1::VT_X, x, 0);
  }
  explicit Uint1Builder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Uint1Builder &operator=(const Uint1Builder &);
  flatbuffers::Offset<Uint1> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint1>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint1> CreateUint1(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t x = 0) {
  Uint1Builder builder_(_fbb);
  builder_.add_x(x);
  return builder_.Finish();
}

}  // namespace data
}  // namespace gl
}  // namespace gpu
}  // namespace tflite

#endif  // FLATBUFFERS_GENERATED_COMMON_TFLITE_GPU_GL_DATA_H_
